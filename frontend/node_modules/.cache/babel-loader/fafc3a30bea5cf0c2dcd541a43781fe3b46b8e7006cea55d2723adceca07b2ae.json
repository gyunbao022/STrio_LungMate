{"ast":null,"code":"// frontend/src/utils/safeStorage.js\n// 안전한 localStorage 접근 + 메모리 폴백\n\nconst memory = new Map();\nfunction storageAvailable() {\n  try {\n    if (typeof window === \"undefined\") return false;\n    // 일부 환경은 window.localStorage 참조만으로도 throw 가능 → 전부 try 안에\n    const ls = window.localStorage;\n    const k = \"__safe_storage_probe__\";\n    ls.setItem(k, \"1\");\n    ls.removeItem(k);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\nconst safeStorage = {\n  getItem(key) {\n    try {\n      var _memory$get;\n      if (storageAvailable()) {\n        return window.localStorage.getItem(key);\n      }\n      return (_memory$get = memory.get(key)) !== null && _memory$get !== void 0 ? _memory$get : null;\n    } catch {\n      var _memory$get2;\n      return (_memory$get2 = memory.get(key)) !== null && _memory$get2 !== void 0 ? _memory$get2 : null;\n    }\n  },\n  setItem(key, value) {\n    try {\n      if (storageAvailable()) {\n        window.localStorage.setItem(key, String(value));\n      } else {\n        memory.set(key, String(value));\n      }\n    } catch {\n      memory.set(key, String(value));\n    }\n  },\n  removeItem(key) {\n    try {\n      if (storageAvailable()) {\n        window.localStorage.removeItem(key);\n      } else {\n        memory.delete(key);\n      }\n    } catch {\n      memory.delete(key);\n    }\n  },\n  clear() {\n    try {\n      if (storageAvailable()) {\n        window.localStorage.clear();\n      } else {\n        memory.clear();\n      }\n    } catch {\n      memory.clear();\n    }\n  },\n  // 편의 메서드 (JSON)\n  getJSON(key, fallback = null) {\n    const raw = safeStorage.getItem(key);\n    if (raw == null) return fallback;\n    try {\n      return JSON.parse(raw);\n    } catch {\n      return fallback;\n    }\n  },\n  setJSON(key, obj) {\n    try {\n      safeStorage.setItem(key, JSON.stringify(obj));\n    } catch {\n      // 폴백은 setItem에서 처리됨\n    }\n  }\n};\nexport default safeStorage;","map":{"version":3,"names":["memory","Map","storageAvailable","window","ls","localStorage","k","setItem","removeItem","_","safeStorage","getItem","key","_memory$get","get","_memory$get2","value","String","set","delete","clear","getJSON","fallback","raw","JSON","parse","setJSON","obj","stringify"],"sources":["C:/Users/강의1_22/Desktop/STrio_LungMate/frontend/src/utils/safeStorage.js"],"sourcesContent":["// frontend/src/utils/safeStorage.js\r\n// 안전한 localStorage 접근 + 메모리 폴백\r\n\r\nconst memory = new Map();\r\n\r\nfunction storageAvailable() {\r\n  try {\r\n    if (typeof window === \"undefined\") return false;\r\n    // 일부 환경은 window.localStorage 참조만으로도 throw 가능 → 전부 try 안에\r\n    const ls = window.localStorage;\r\n    const k = \"__safe_storage_probe__\";\r\n    ls.setItem(k, \"1\");\r\n    ls.removeItem(k);\r\n    return true;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst safeStorage = {\r\n  getItem(key) {\r\n    try {\r\n      if (storageAvailable()) {\r\n        return window.localStorage.getItem(key);\r\n      }\r\n      return memory.get(key) ?? null;\r\n    } catch {\r\n      return memory.get(key) ?? null;\r\n    }\r\n  },\r\n\r\n  setItem(key, value) {\r\n    try {\r\n      if (storageAvailable()) {\r\n        window.localStorage.setItem(key, String(value));\r\n      } else {\r\n        memory.set(key, String(value));\r\n      }\r\n    } catch {\r\n      memory.set(key, String(value));\r\n    }\r\n  },\r\n\r\n  removeItem(key) {\r\n    try {\r\n      if (storageAvailable()) {\r\n        window.localStorage.removeItem(key);\r\n      } else {\r\n        memory.delete(key);\r\n      }\r\n    } catch {\r\n      memory.delete(key);\r\n    }\r\n  },\r\n\r\n  clear() {\r\n    try {\r\n      if (storageAvailable()) {\r\n        window.localStorage.clear();\r\n      } else {\r\n        memory.clear();\r\n      }\r\n    } catch {\r\n      memory.clear();\r\n    }\r\n  },\r\n\r\n  // 편의 메서드 (JSON)\r\n  getJSON(key, fallback = null) {\r\n    const raw = safeStorage.getItem(key);\r\n    if (raw == null) return fallback;\r\n    try {\r\n      return JSON.parse(raw);\r\n    } catch {\r\n      return fallback;\r\n    }\r\n  },\r\n\r\n  setJSON(key, obj) {\r\n    try {\r\n      safeStorage.setItem(key, JSON.stringify(obj));\r\n    } catch {\r\n      // 폴백은 setItem에서 처리됨\r\n    }\r\n  },\r\n};\r\n\r\nexport default safeStorage;\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;AAExB,SAASC,gBAAgBA,CAAA,EAAG;EAC1B,IAAI;IACF,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE,OAAO,KAAK;IAC/C;IACA,MAAMC,EAAE,GAAGD,MAAM,CAACE,YAAY;IAC9B,MAAMC,CAAC,GAAG,wBAAwB;IAClCF,EAAE,CAACG,OAAO,CAACD,CAAC,EAAE,GAAG,CAAC;IAClBF,EAAE,CAACI,UAAU,CAACF,CAAC,CAAC;IAChB,OAAO,IAAI;EACb,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF;AAEA,MAAMC,WAAW,GAAG;EAClBC,OAAOA,CAACC,GAAG,EAAE;IACX,IAAI;MAAA,IAAAC,WAAA;MACF,IAAIX,gBAAgB,CAAC,CAAC,EAAE;QACtB,OAAOC,MAAM,CAACE,YAAY,CAACM,OAAO,CAACC,GAAG,CAAC;MACzC;MACA,QAAAC,WAAA,GAAOb,MAAM,CAACc,GAAG,CAACF,GAAG,CAAC,cAAAC,WAAA,cAAAA,WAAA,GAAI,IAAI;IAChC,CAAC,CAAC,MAAM;MAAA,IAAAE,YAAA;MACN,QAAAA,YAAA,GAAOf,MAAM,CAACc,GAAG,CAACF,GAAG,CAAC,cAAAG,YAAA,cAAAA,YAAA,GAAI,IAAI;IAChC;EACF,CAAC;EAEDR,OAAOA,CAACK,GAAG,EAAEI,KAAK,EAAE;IAClB,IAAI;MACF,IAAId,gBAAgB,CAAC,CAAC,EAAE;QACtBC,MAAM,CAACE,YAAY,CAACE,OAAO,CAACK,GAAG,EAAEK,MAAM,CAACD,KAAK,CAAC,CAAC;MACjD,CAAC,MAAM;QACLhB,MAAM,CAACkB,GAAG,CAACN,GAAG,EAAEK,MAAM,CAACD,KAAK,CAAC,CAAC;MAChC;IACF,CAAC,CAAC,MAAM;MACNhB,MAAM,CAACkB,GAAG,CAACN,GAAG,EAAEK,MAAM,CAACD,KAAK,CAAC,CAAC;IAChC;EACF,CAAC;EAEDR,UAAUA,CAACI,GAAG,EAAE;IACd,IAAI;MACF,IAAIV,gBAAgB,CAAC,CAAC,EAAE;QACtBC,MAAM,CAACE,YAAY,CAACG,UAAU,CAACI,GAAG,CAAC;MACrC,CAAC,MAAM;QACLZ,MAAM,CAACmB,MAAM,CAACP,GAAG,CAAC;MACpB;IACF,CAAC,CAAC,MAAM;MACNZ,MAAM,CAACmB,MAAM,CAACP,GAAG,CAAC;IACpB;EACF,CAAC;EAEDQ,KAAKA,CAAA,EAAG;IACN,IAAI;MACF,IAAIlB,gBAAgB,CAAC,CAAC,EAAE;QACtBC,MAAM,CAACE,YAAY,CAACe,KAAK,CAAC,CAAC;MAC7B,CAAC,MAAM;QACLpB,MAAM,CAACoB,KAAK,CAAC,CAAC;MAChB;IACF,CAAC,CAAC,MAAM;MACNpB,MAAM,CAACoB,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;EAED;EACAC,OAAOA,CAACT,GAAG,EAAEU,QAAQ,GAAG,IAAI,EAAE;IAC5B,MAAMC,GAAG,GAAGb,WAAW,CAACC,OAAO,CAACC,GAAG,CAAC;IACpC,IAAIW,GAAG,IAAI,IAAI,EAAE,OAAOD,QAAQ;IAChC,IAAI;MACF,OAAOE,IAAI,CAACC,KAAK,CAACF,GAAG,CAAC;IACxB,CAAC,CAAC,MAAM;MACN,OAAOD,QAAQ;IACjB;EACF,CAAC;EAEDI,OAAOA,CAACd,GAAG,EAAEe,GAAG,EAAE;IAChB,IAAI;MACFjB,WAAW,CAACH,OAAO,CAACK,GAAG,EAAEY,IAAI,CAACI,SAAS,CAACD,GAAG,CAAC,CAAC;IAC/C,CAAC,CAAC,MAAM;MACN;IAAA;EAEJ;AACF,CAAC;AAED,eAAejB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}